<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.com.debico</groupId>
	<artifactId>debico</artifactId>
	<version>2.0.0</version>
	<packaging>pom</packaging>
	<name>Debico</name>
	<description>Mais que um bolão entre os amigos.</description>

	<organization>
		<name>Pixels Are Cool</name>
		<url>http://pixelsarecool.com</url>
	</organization>
	<url>http://www.debico.com.br/</url>
	<modules>
		<module>debico-model</module>
		<module>debico-core</module>
		<module>debico-bolao</module>
		<module>debico-campeonato</module>
		<module>debico-test</module>
		<module>debico-social</module>
		<module>debico-notify</module>
		<module>debico-ui</module>
	</modules>

	<developers>
		<developer>
			<email>ricardozanini@gmail.com</email>
			<id>ricardozanini</id>
			<name>Ricardo Zanini</name>
			<organization>Pixels são legais</organization>
			<organizationUrl>http://pixelsarecool.com</organizationUrl>
			<roles>
				<role>owner</role>
			</roles>
			<timezone>UTC+3</timezone>
			<url>http://pixelsarecool.com</url>
		</developer>
	</developers>

	<!-- http://maven.apache.org/scm/git.html -->
	<scm>
		<url>https://bitbucket.org/ricardozanini/debico</url>
		<connection>scm:git:ssh://git@bitbucket.org/ricardozanini/debico.git</connection>
		<developerConnection>scm:git:ssh://git@bitbucket.org/ricardozanini/debico.git</developerConnection>
	</scm>

	<repositories>
		<!-- Necessário pelo Swagger ref.: https://github.com/adrianbk/swagger-springmvc-demo/tree/master/swagger-ui -->
		<repository>
			<id>oss-jfrog-artifactory</id>
			<name>oss-jfrog-artifactory-releases</name>
			<url>http://oss.jfrog.org/artifactory/oss-release-local</url>
		</repository>
	</repositories>

	<properties>
		<!-- Project -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.7</java.version>

		<!-- Commons -->
		<slf4j.version>1.7.7</slf4j.version>
		<logback.version>1.1.2</logback.version>
		<guava.version>17.0</guava.version>
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<joda.time.version>2.3</joda.time.version>

		<!-- Java -->
		<javax.servlet.version>3.0.1</javax.servlet.version>
		<javax.inject.version>1</javax.inject.version>
		<javax.annotation.version>1.2</javax.annotation.version>
		<javax.mail.version>1.4.7</javax.mail.version>

		<!-- One Library to rule them all -->
		<spring.version>4.0.5.RELEASE</spring.version>
		<spring.security.version>4.0.0.RELEASE</spring.security.version>

		<!-- Database -->
		<hibernate.version>4.3.5.Final</hibernate.version>
		<hibernate-jpa.version>1.0.0.Final</hibernate-jpa.version>

		<!-- Tests -->
		<junit.version>4.11</junit.version>
		<hamcrest.version>1.3</hamcrest.version>

		<!-- Web -->
		<jackson.version>2.5.2</jackson.version>

		<!-- Plugins -->
		<surefire.version>2.17</surefire.version>
		<resources.plugin.version>2.6</resources.plugin.version>
		<build.number.plugin.version>1.3</build.number.plugin.version>
		<jacoco-maven-plugin.version>0.7.4.201502262128</jacoco-maven-plugin.version>
		<maven.compiler.version>3.1</maven.compiler.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-ext</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-model</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-campeonato</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-bolao</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-social</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-notify</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>br.com.debico</groupId>
				<artifactId>debico-test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>


			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda.time.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
				<!-- http://www.codingpedia.org/ama/how-to-log-in-spring-with-slf4j-and-logback/ -->
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-web</artifactId>
				<version>${spring.security.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-config</artifactId>
				<version>${spring.security.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-core</artifactId>
				<version>${spring.security.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- Following some recent email discussions, I'd like to summarize the 
				state of affairs here: Spring Framework 3.2.3+ fully supports Hibernate 4.0 
				to 4.2.x in its orm.hibernate4 package. Spring Framework 4.0.1+ fully supports 
				Hibernate 4.0 to 4.3.x in its orm.hibernate4 package. We strongly recommend 
				an upgrade to Spring Framework 4.0.x along with your upgrade to Hibernate 
				4.3.x; otherwise, please keep using Hibernate 4.2.x for the time being. Note 
				that Spring Framework 4.0 went GA ahead of Hibernate 4.3's GA and is a very 
				straightforward upgrade from the Spring Framework 3.2.x line. If you'd like 
				to (or have to) stick with Hibernate 4.2 for the time being, e.g. because 
				you're running on a JPA 2.0 based server, then the entire Spring Framework 
				4.x line will still be there to support you. However, we do not recommend 
				the use of Hibernate 4.0.x or 4.1.x; we strongly suggest either the latest 
				Hibernate 4.2.x or 4.3.x release with Spring 4. Juergen -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-entitymanager</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate.javax.persistence</groupId>
				<artifactId>hibernate-jpa-2.1-api</artifactId>
				<version>${hibernate-jpa.version}</version>
			</dependency>

			<dependency>
				<groupId>javax.inject</groupId>
				<artifactId>javax.inject</artifactId>
				<version>${javax.inject.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.annotation</groupId>
				<artifactId>javax.annotation-api</artifactId>
				<version>${javax.annotation.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javax.servlet.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
				<version>${javax.mail.version}</version>
				<scope>provided</scope>
			</dependency>


		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>it</id>
			<properties>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
	</profiles>

	<build>
		<plugins>
			<!-- Previne o log dos testes durante o build do maven. -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.version}</version>
				<executions>
					<execution>
						<id>default-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<argLine>${argLine} -Xms521m -Xmx1024m</argLine>
					<forkCount>1</forkCount>
					<reuseForks>true</reuseForks>
					<skipTests>${skip.unit.tests}</skipTests>
					<systemPropertyVariables>
						<logback.debug>false</logback.debug>
						<log.sys.level>OFF</log.sys.level>
						<log.root.level>OFF</log.root.level>
						<hibernate.show_sql>false</hibernate.show_sql>
					</systemPropertyVariables>
					<excludes>
						<!-- testes de integracao nao -->
						<exclude>**/*IT.java</exclude>
						<excludes>logback-test.xml</excludes>
					</excludes>
				</configuration>
			</plugin>
			<!-- http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html desabilitar: 
				-Dmaven.buildNumber.doCheck=false e -Dmaven.buildNumber.doUpdate=false -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>${build.number.plugin.version}</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
					<doCheck>false</doCheck>
					<doUpdate>true</doUpdate>
					<shortRevisionLength>5</shortRevisionLength>
					<!-- timestamp <format>{0,date,yyyyMMddHHmmss}</format> <items> <item>timestamp</item> 
						</items> -->
				</configuration>
			</plugin>
			<!-- http://stackoverflow.com/questions/25373452/skipping-jacoco-execution-due-to-missing-execution-data-error -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
							<append>true</append>
							<!-- http://stackoverflow.com/questions/14559117/how-do-i-disable-jacoco-agent-after-jacocoreport -->
							<excludes>
								<exclude>org.drools.compiler.lang.DRL6Lexer</exclude>
							</excludes>
							<propertyName>argLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<append>true</append>
							<dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
							<append>true</append>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>argLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<append>true</append>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jacoco</groupId>
										<artifactId>
											jacoco-maven-plugin
										</artifactId>
										<versionRange>
											[0.7.2.201409121644,)
										</versionRange>
										<goals>
											<goal>prepare-agent</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>
	</build>

</project>